{%- extends 'Mandala.j2' %}

{% set ns = namespace(path_uid={}) %}

{%- macro mandala_meta_expand(d, indent=0, path=[], level=0, uid=0, parent=0) -%}
{% set ind = ' '*indent*indent_size %}
{% set ind1 = ' '*(indent+1)*indent_size %}
{% set path = path+[d.name] %}
{% set meta = path|join('::') %}

{%- if d.units is defined -%}
{% set units = d.units %}
{% else %}
{% set units = '' %}
{%- endif -%}

{%- if d.type == 'enum' -%}
{% set units = units|join(',') %}
{%- endif -%}

{%- if d.suffix is defined -%}
{% set title = parent.title+' '+d.suffix %}
{% else %}
{% set title = d.title %}
{%- endif -%}

{{ ind }}{
{{ ind1 }}.name = "{{ d.name }}",
{{ ind1 }}.title = "{{ title }}",
{{ ind1 }}.descr = "{{ d.descr }}",
{{ ind1 }}.units = "{{ units }}",
{{ ind1 }}.path = "{{ path|join('.') }}",
{{ ind1 }}.uid = 0x{{ '%0x' % uid }},
{{ ind1 }}.level = {{ level }},
{{ ind1 }}.group = {% if d.content is defined %}1{% else %}0{% endif %},
{{ ind1 }}.type_id = type_{{ d.type }},
{{ ind }}},
{% set _dummy = ns.path_uid.update({path|join('.'):uid}) %}
{% set uid_pow = data.uid_bits[level+2:]|sum %}
{% set uid_mul = 2**uid_pow %}
{% for i in d.content %}
{{ mandala_meta_expand(i, indent, path, level+1, uid+loop.index0*uid_mul, d) }}
{%- endfor -%}
{%- endmacro -%}

{%- block content %}
// Auto-generated file
#pragma once

#include <Mandala/MandalaMetaBase.h>

namespace mandala {
{% set ind = ' '*indent_size %}

// uid bits by level (level 0=root)
static constexpr const uint8_t uid_bits[] = {
{{ ind }}{% for i in data.uid_bits %}{{ i }},{% endfor %} // total {{ data.uid_bits|sum }} bits, {{ data.uid_bits|length }} levels
};
static constexpr const mandala::uid_t uid_base = 0x{{ '%0x' % data.uid_base }};

// flat array of all elements
static constexpr const mandala::meta_t meta[] = {
{% for i in data.content %}
{% set uid_pow = data.uid_bits[1:]|sum %}
{% set uid_mul = 2**uid_pow %}
{{ mandala_meta_expand(i, 1, [], 0, data.uid_base+loop.index0*uid_mul) }}
{% endfor %}
}; // meta array

{#

// Default streams
{% for s in data.streams %}
// stream: {{ s.name }}: {{ s.title }}
static constexpr const mandala::stream_item_t stream_{{ s.name }}[] = {
{% for i in s.content %}
{% set path = i.keys()[0] %}
{% set fmt = i.values()[0] %}
{% set uid = ns.path_uid[path] %}
{ .uid = 0x{{ '%0x' % uid }}, .sfmt = sfmt_{{ fmt }} },  // {{ path }}
{% endfor %}
{ .uid = 0, .sfmt = sfmt_void }
};
{% endfor %}

static constexpr const mandala::stream_id_t streams[] = {
{% for s in data.streams %}
{ .name = "{{ s.name }}", .title = "{{ s.title }}", .content = stream_{{ s.name }} },
{% endfor %}
};
#}
}; // namespace

{% endblock %}
